@component-name = "portal-publications"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Settings");

		Publications.enablePublications();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ApplicationsMenu.gotoPortlet(
				category = "Publications",
				panel = "Applications",
				portlet = "Settings");

			Publications.disablePublications();
		}
	}

	@priority = "4"
	test PublishDeletedPageWithTag {
		property test.name.skip.portal.instance = "PublicationsPage#PublishDeletedPageWithTag";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "Test Page");

		Publications.createNewPublication(publicationsName = "Publication Name");

		SitePages.openPagesAdmin(siteURLKey = "guest");

		SitePages.gotoPageMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		AssetCategorization.addTag(tagName = "tag name");

		PortletEntry.save();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.deletePage(pageName = "Test Page");

		Navigator.openURL();

		Page.viewNoPG(pageName = "Test Page");

		Publications.gotoReviewPublications();

		PublicationsChanges.viewPublicationsViaChangesStyle(
			publicationsCategory = "Page",
			publicationsSite = "Guest",
			publicationsTitle = "Test Page",
			publicationsType = "Deleted",
			publicationsUser = "Test Test");

		PublicationsChanges.viewPublicationsViaContextStyle(
			publicationsCategory = "Page",
			publicationsDescription = "Test Test deleted a Page in Guest",
			publicationsTitle = "Test Page");

		Publications.gotoPublish(publicationsName = "Publication Name");

		Publications.publishPublication(publicationsName = "Publication Name");

		Navigator.openURL();

		Page.viewNoPG(pageName = "Test Page");
	}

	@priority = "4"
	test PublishPrivateContentPageWithFragment {
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "PublicationsPage#PublishPrivateContentPageWithFragment";

		Publications.createNewPublication(publicationsName = "Publication Name");

		JSONFragment.addFragmentCollection(
			groupName = "Guest",
			name = "Collection Name");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "Guest");

		FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

		FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

		var fragmentHTML = '''<lfr-widget-asset-list>''';
		var htmlSnippet = '''<lfr-''';

		FragmentsEditor.autocompleteFragmentHTML(
			autocompleteField = "lfr-widget-asset-list",
			fragmentHTML = "${fragmentHTML}",
			htmlSnippet = "${htmlSnippet}");

		PortletEntry.publish();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		ContentPages.addPrivatePage(pageName = "Test Page");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Fragment Name");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "group/guest/test-page");

		WebContent.viewPGViaAP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Publications.gotoPublish(publicationsName = "Publication Name");

		Publications.publishPublication(publicationsName = "Publication Name");

		Navigator.gotoPrivateSitePage(
			pageName = "Test Page",
			siteName = "Guest");

		WebContent.viewPGViaAP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");
	}

	@priority = "5"
	test ViewPageFriendlyURLAfterRevertingPublication {
		property test.name.skip.portal.instance = "PublicationsPage#ViewPageFriendlyURLAfterRevertingPublication";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "Test Page");

		Publications.createNewPublication(publicationsName = "Publication Name");

		SitePages.openPagesAdmin(siteURLKey = "guest");

		SitePages.gotoPageMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		Page.editFriendlyURL(friendlyURLEdit = "/test-page-edited");

		AssertVisible(
			key_friendlyURL = "/test-page-edited",
			locator1 = "SitePages#FRIENDLY_URL");

		Publications.workOnProduction();

		AssertVisible(
			key_friendlyURL = "/test-page",
			locator1 = "SitePages#FRIENDLY_URL");

		Publications.selectPublication(publicationsName = "Publication Name");

		Publications.gotoPublish(publicationsName = "Publication Name");

		Publications.publishPublication(publicationsName = "Publication Name");

		SitePages.openPagesAdmin(siteURLKey = "guest");

		SitePages.gotoPageMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		AssertVisible(
			key_friendlyURL = "/test-page-edited",
			locator1 = "SitePages#FRIENDLY_URL");

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		Navigator.gotoNavTab(navTab = "History");

		Publications.revertPublication(publicationsName = "Publication Name");

		SitePages.openPagesAdmin(siteURLKey = "guest");

		SitePages.gotoPageMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		AssertVisible(
			key_friendlyURL = "/test-page",
			locator1 = "SitePages#FRIENDLY_URL");
	}

}